const db = require("../models/db");

// Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
exports.addToCart = async (req, res) => {
    const { idSP, size, quantity, image, name, price } = req.body;

    if (!idSP || !size || !quantity) {
        return res.status(400).json({ error: "Thi·∫øu th√¥ng tin s·∫£n ph·∫©m" });
    }

    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p ch∆∞a
    if (!req.session.user) {
        // üîπ Ch∆∞a ƒëƒÉng nh·∫≠p: L∆∞u v√†o session
        if (!req.session.cart) {
            req.session.cart = [];
        }

        // Ki·ªÉm tra xem s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè h√†ng session ch∆∞a
        const existingProduct = req.session.cart.find(item => item.idSP === idSP && item.size === size);
        
        if (existingProduct) {
            existingProduct.quantity += parseInt(quantity);
        } else {
            req.session.cart.push({ idSP, size, quantity: parseInt(quantity), image, name, price });
        }

        return res.json({ message: "ƒê√£ th√™m v√†o gi·ªè h√†ng (Session)", cart: req.session.cart });
    }

    // üîπ ƒê√£ ƒëƒÉng nh·∫≠p: L∆∞u v√†o database
    try {
        const userId = req.session.user.id;

        // Ki·ªÉm tra xem s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè h√†ng c·ªßa user ch∆∞a
        const checkCartSql = "SELECT * FROM cart WHERE user_id = ? AND idSP = ? AND size = ?";
        const [existingCart] = await db.promise().query(checkCartSql, [userId, idSP, size]);

        if (existingCart.length > 0) {
            // N·∫øu s·∫£n ph·∫©m ƒë√£ c√≥, c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
            const updateCartSql = "UPDATE cart SET quantity = quantity + ? WHERE user_id = ? AND idSP = ? AND size = ?";
            await db.promise().query(updateCartSql, [parseInt(quantity), userId, idSP, size]);
        } else {
            // N·∫øu ch∆∞a c√≥, th√™m m·ªõi v√†o gi·ªè h√†ng c·ªßa user
            const insertCartSql = "INSERT INTO cart (idSP, size, quantity, image, name, price, user_id) VALUES (?, ?, ?, ?, ?, ?, ?)";
            await db.promise().query(insertCartSql, [idSP, size, parseInt(quantity), image, name, price, userId]);
        }

        return res.json({ message: "ƒê√£ th√™m v√†o gi·ªè h√†ng (Database)" });

    } catch (err) {
        console.error("L·ªói khi th√™m v√†o gi·ªè h√†ng:", err);
        return res.status(500).json({ error: "L·ªói server" });
    }
};
exports.getCart = async (req, res) => {
    if (!req.session.user) {
        // üîπ N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p, tr·∫£ v·ªÅ gi·ªè h√†ng trong session
        return res.json({ cart: req.session.cart || [] });
    }

    try {
        const userId = req.session.user.id;
        const sql = "SELECT * FROM cart WHERE user_id = ?";
        const [cartItems] = await db.promise().query(sql, [userId]);

        return res.json({ cart: cartItems });
    } catch (err) {
        console.error("L·ªói khi l·∫•y gi·ªè h√†ng:", err);
        return res.status(500).json({ error: "L·ªói server" });
    }
};
exports.viewCart = async (req, res) => {
    let cart = [];

    if (req.session.user) {
        // üîπ N·∫øu ƒë√£ ƒëƒÉng nh·∫≠p, l·∫•y gi·ªè h√†ng t·ª´ database
        const [cartItems] = await db.promise().query("SELECT * FROM cart WHERE user_id = ?", [req.session.user.id]);
        cart = cartItems;
    } else {
        // üîπ N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p, l·∫•y gi·ªè h√†ng t·ª´ session
        cart = req.session.cart || [];
    }

    res.render("cart", { cart });
};

// Xo√° s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
exports.removeFromCart = async (req, res) => {
    const { idSP, size } = req.body;

    if (!idSP || !size) {
        return res.status(400).json({ error: "Thi·∫øu th√¥ng tin s·∫£n ph·∫©m" });
    }

    if (!req.session.user) {
        // Xo√° trong session n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p
        req.session.cart = req.session.cart.filter(item => !(item.idSP === idSP && item.size === size));
        return res.json({ message: "ƒê√£ xo√° s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng (Session)", cart: req.session.cart });
    }

    try {
        const userId = req.session.user.id;
        const deleteCartSql = "DELETE FROM cart WHERE user_id = ? AND idSP = ? AND size = ?";
        await db.promise().query(deleteCartSql, [userId, idSP, size]);

        return res.json({ message: "ƒê√£ xo√° s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng (Database)" });
    } catch (err) {
        console.error("L·ªói khi xo√° s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng:", err);
        return res.status(500).json({ error: "L·ªói server" });
    }
};

// Xo√° to√†n b·ªô gi·ªè h√†ng
exports.clearCart = async (req, res) => {
    if (!req.session.user) {
        req.session.cart = [];
        return res.json({ message: "ƒê√£ xo√° to√†n b·ªô gi·ªè h√†ng (Session)" });
    }

    try {
        const userId = req.session.user.id;
        const clearCartSql = "DELETE FROM cart WHERE user_id = ?";
        await db.promise().query(clearCartSql, [userId]);

        return res.json({ message: "ƒê√£ xo√° to√†n b·ªô gi·ªè h√†ng (Database)" });
    } catch (err) {
        console.error("L·ªói khi xo√° to√†n b·ªô gi·ªè h√†ng:", err);
        return res.status(500).json({ error: "L·ªói server" });
    }
};

// CartController.js


// Th√™m m√£ gi·∫£m gi√° v√†o gi·ªè h√†ng
exports.applyDiscount = async (req, res) => {
    const { discountCode } = req.body;
    if (!discountCode) {
        return res.status(400).json({ error: "Vui l√≤ng nh·∫≠p m√£ gi·∫£m gi√°" });
    }

    try {
        // Ki·ªÉm tra m√£ gi·∫£m gi√°
        const [discount] = await db.promise().query(
            "SELECT * FROM discount_codes WHERE code = ? AND quantitydiscount > 0 AND expiration_date > NOW()",
            [discountCode]
        );

        if (discount.length === 0) {
            return res.status(400).json({ error: "M√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá, h·∫øt l∆∞·ª£t ho·∫∑c ƒë√£ h·∫øt h·∫°n." });
        }

        // L·∫•y gi·ªè h√†ng t·ª´ database
        const userId = req.session.user ? req.session.user.id : null;
        const [cartItems] = await db.promise().query(
            "SELECT * FROM cart WHERE user_id = ?",
            [userId]
        );

        if (cartItems.length === 0) {
            return res.status(400).json({ error: "Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng." });
        }

        // T√≠nh t·ªïng ti·ªÅn
        let totalPrice = cartItems.reduce((total, item) => total + item.price * item.quantity, 0);

        // √Åp d·ª•ng gi·∫£m gi√°
        const discountValue = discount[0].discount_percentage;
        const discountedTotal = totalPrice - (totalPrice * discountValue) / 100;
        req.session.discount = {
            code: discountCode,
            discount_percent: discountValue
        };

        res.json({
            message: "√Åp d·ª•ng m√£ gi·∫£m gi√° th√†nh c√¥ng!",
            discountedTotal
        });

    } catch (err) {
        console.error("L·ªói khi √°p d·ª•ng m√£ gi·∫£m gi√°:", err);
        return res.status(500).json({ error: "L·ªói server" });
    }
};


// Thanh to√°n gi·ªè h√†ng
const axios = require('axios');
const crypto = require('crypto');

// Thanh to√°n gi·ªè h√†ng
exports.checkout = async (req, res) => {
    if (!req.session.user) {
        return res.status(401).json({ error: "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ thanh to√°n." });
    }

    const userId = req.session.user.id;
    const { paymentMethod } = req.body;

    if (!['Ch∆∞a thanh to√°n', 'ƒê√£ thanh to√°n online'].includes(paymentMethod)) {
        return res.status(400).json({ error: "Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng h·ª£p l·ªá." });
    }

    try {
        const [cartItems] = await db.promise().query("SELECT * FROM cart WHERE user_id = ?", [userId]);

        if (cartItems.length === 0) {
            return res.status(400).json({ error: "Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng." });
        }

        let insufficientStock = [];

        for (const item of cartItems) {
            const [productSize] = await db.promise().query(
                "SELECT quantity FROM product_size WHERE idSP = ? AND size = ?",
                [item.idSP, item.size]
            );

            if (productSize.length === 0 || productSize[0].quantity < item.quantity) {
                insufficientStock.push({
                    name: item.name,
                    size: item.size,
                    available: productSize[0].quantity || 0
                });
            }
        }

        if (insufficientStock.length > 0) {
            return res.status(400).json({
                error: "M·ªôt s·ªë s·∫£n ph·∫©m kh√¥ng ƒë·ªß h√†ng.",
                insufficientStock
            });
        }

        let totalPrice = cartItems.reduce((total, item) => total + item.price * item.quantity, 0);

        if (req.session.discount) {
            const discountAmount = (totalPrice * req.session.discount.discount_percent) / 100;
            totalPrice -= discountAmount;
            await db.promise().query("UPDATE discount_codes SET quantitydiscount = quantitydiscount - 1 WHERE code = ?", [req.session.discount.code]);
            req.session.discount = null;
        }

        const orderStatus = 'ƒê√£ t·∫°o ƒë∆°n h√†ng';

        const [orderResult] = await db.promise().query(
            "INSERT INTO orders (user_id, total_price, payment_method, order_status) VALUES (?, ?, ?, ?)",
            [userId, totalPrice, paymentMethod, orderStatus]
        );
        const orderId = orderResult.insertId;

        for (const item of cartItems) {
            await db.promise().query(
                "UPDATE product_size SET quantity = quantity - ? WHERE idSP = ? AND size = ?",
                [item.quantity, item.idSP, item.size]
            );

            await db.promise().query(
                "INSERT INTO order_items (order_id, idSP, size, quantity, price) VALUES (?, ?, ?, ?, ?)",
                [orderId, item.idSP, item.size, item.quantity, item.price]
            );
        }

        await db.promise().query("DELETE FROM cart WHERE user_id = ?", [userId]);

        if (paymentMethod === 'ƒê√£ thanh to√°n online') {
            const endpoint = "https://test-payment.momo.vn/v2/gateway/api/create";
            const partnerCode = 'MOMOBKUN20180529';
            const accessKey = 'klm05TvNBzhg7h7j';
            const serectkey = 'at67qH6mk8w5Y1nAyMoYKMWACiEi2bsa';
            const orderInfo = "Thanh to√°n qua MoMo";
            const ipnUrl = "http://localhost:3000/cart";
            const redirectUrl = "http://localhost:3000/cart";
            const requestId = `${Date.now()}`;
            const momoOrderId = `DH${Date.now()}`;
            const requestType = "payWithATM";
            const extraData = "";

            const rawHash = `accessKey=${accessKey}&amount=${totalPrice}&extraData=${extraData}&ipnUrl=${ipnUrl}&orderId=${momoOrderId}&orderInfo=${orderInfo}&partnerCode=${partnerCode}&redirectUrl=${redirectUrl}&requestId=${requestId}&requestType=${requestType}`;
            const signature = crypto.createHmac('sha256', serectkey).update(rawHash).digest('hex');

            const momoData = {
                partnerCode,
                partnerName: "Test",
                storeId: "MomoTestStore",
                requestId,
                amount: totalPrice,
                orderId: momoOrderId,
                orderInfo,
                redirectUrl,
                ipnUrl,
                lang: 'vi',
                extraData,
                requestType,
                signature
            };

            const response = await axios.post(endpoint, momoData, {
                headers: { 'Content-Type': 'application/json' },
                timeout: 5000
            });

            if (response.data && response.data.payUrl) {
                return res.json({ message: "ƒê·∫∑t h√†ng th√†nh c√¥ng!", orderId, totalPrice, payUrl: response.data.payUrl });
            } else {
                return res.status(400).json({ error: "Kh√¥ng th·ªÉ t·∫°o li√™n k·∫øt thanh to√°n MoMo." });
            }
        }

        res.json({ message: "ƒê·∫∑t h√†ng th√†nh c√¥ng!", orderId, totalPrice });
    } catch (err) {
        console.error("L·ªói khi thanh to√°n:", err);
        res.status(500).json({ error: "L·ªói server" });
    }
};
